{"version":3,"sources":["../src/datasource.js"],"names":["ndjsonStream","rxjs","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","subject","Subject","metrics","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","request","Request","fetch","then","default","response","body","reader","s","getReader","read","result","done","seriesList","oldestTimeMS","earliestTimeMS","range","from","unix","element","value","indicator","target","id","datapoints","index","times","ts","dataField","push","series","p","to","Object","keys","map","key","next","moment","resolve","subscribe","doRequest","method","status","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","interpolated","mapToTextValue","_","d","i","text","isObject","datasourceRequest","scopedVars","refId","Promise","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport * as ndjsonStream from './vendor/ndjson.js';\nimport * as rxjs from './vendor/rxjs.umd.min.js';\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { 'Content-Type': 'application/json' };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var subject = new rxjs.Subject();\n    var metrics = {};\n\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    var request = new Request(`${this.url}/query`);\n\n    fetch(request)\n      .then(response => {\n        // In our case our messages are new-line delimmited json, but partial messages\n        // may come across the wire, so we use ndjson to help manage stitching them together\n        return ndjsonStream.default(response.body);\n      })\n      .then(s => {\n        const reader = s.getReader();\n        let read;\n        reader.read().then(\n          (read = result => {\n            if (result.done) {\n              return;\n            }\n            const seriesList = [];\n            let oldestTimeMS;\n            let earliestTimeMS = options.range.from.unix() * 1000;\n\n            const element = result.value.result;\n            var indicator = {\n              target: element.id,\n              datapoints: [],\n            };\n            for (var index = 0; index < element.times.length; index++) {\n              let ts = [];\n              oldestTimeMS = element.times[index] * 1000;\n              ts = [element[dataField].data[index], element.times[index] * 1000];\n              indicator.datapoints.push(ts);\n            }\n\n            let series = metrics[indicator.target];\n            if (!series) {\n              series = { target: indicator.target, datapoints: [] };\n              metrics[indicator.target] = series;\n            }\n            series.datapoints = [...series.datapoints, ...indicator.datapoints];\n\n            // Slide the \"window\" and remove older points\n            series.datapoints = series.datapoints.filter(\n              p => p[1] > oldestTimeMS - (options.range.to.unix() * 1000 - options.range.from.unix() * 1000)\n            );\n            if (series.datapoints[0] && series.datapoints[0][1] && series.datapoints[0][1] > earliestTimeMS) {\n              earliestTimeMS = series.datapoints[0][1];\n            }\n            seriesList.push(series);\n\n            const ts = Object.keys(metrics).map(key => {\n              return metrics[key];\n            });\n\n            subject.next({\n              data: ts,\n              range: { from: moment(earliestTimeMS), to: moment(oldestTimeMS) },\n            });\n            reader.read().then(read);\n          })\n        );\n      });\n\n    return this.$q.resolve({\n      subscribe: function(options) {\n        return subject.subscribe(options);\n      },\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query,\n      },\n      rangeRaw: options.rangeRaw,\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery,\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, 'regex'),\n    };\n\n    return this.doRequest({\n      url: this.url + '/search',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options,\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options,\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n}\n"]}